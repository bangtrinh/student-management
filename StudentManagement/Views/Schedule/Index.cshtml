@model List<StudentManagement.Models.Schedule>
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = Localizer["Schedule"];

    var startOfWeek = ViewBag.StartOfWeek as DateTime? ?? DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek + 1);
    var endOfWeek = startOfWeek.AddDays(6);
    var prevWeek = startOfWeek.AddDays(-7);
    var nextWeek = startOfWeek.AddDays(7);
    var studentId = Context.Request.Query["studentId"].ToString();
}

<h2 class="text-center">@Localizer["Schedule"]</h2>

<form asp-action="Index" method="get" class="mb-3 text-center">
    <div class="form-group d-inline-block">
        <label for="studentId">@Localizer["StudentId"]:</label>
        <input type="text" name="studentId" id="studentId" class="form-control" value="@studentId" />
        <button type="submit" class="btn btn-primary">@Localizer["Search"]</button>
    </div>
</form>

@if (string.IsNullOrEmpty(studentId))
{
    <div class="alert alert-info text-center">
        @Localizer["PleaseEnterStudentId"]
    </div>
}
else if (Model != null && Model.Any())
{
    <div class="text-center mb-3">
        <a href="@Url.Action("Index", new { studentId, weekStart = prevWeek })" class="btn btn-outline-dark">←</a>
        <strong>@startOfWeek:dd/MM/yyyy - @endOfWeek:dd/MM/yyyy</strong>
        <a href="@Url.Action("Index", new { studentId, weekStart = nextWeek })" class="btn btn-outline-dark">→</a>
    </div>

    <table class="table table-bordered text-center">
        <thead class="thead-dark">
            <tr>
                <th>@Localizer["Period"]</th>
                @for (int i = 0; i < 7; i++)
                {
                    var date = startOfWeek.AddDays(i);
                    <th>@date.ToString("dddd")<br>(@date.ToString("dd/MM"))</th>
                }
            </tr>
        </thead>
        <tbody>
            @for (int lesson = 1; lesson <= 15; lesson++)
            {
                <tr>
                    <td class="font-weight-bold bg-light">@Localizer["Period"] @lesson</td>
                    @for (int i = 0; i < 7; i++)
                    {
                        var date = startOfWeek.AddDays(i);
                        var schedule = Model.FirstOrDefault(s => s.ClassDate.Date == date.Date && GetLessonStart(s.StartTime) == lesson);
                        bool isCoveredByPreviousRowspan = Model.Any(s => s.ClassDate.Date == date.Date &&
                        GetLessonStart(s.StartTime) < lesson &&
                        GetLessonStart(s.StartTime) + GetLessonCount(s.StartTime, s.EndTime) > lesson);

                        if (!isCoveredByPreviousRowspan)
                        {
                            if (schedule != null)
                            {
                                int rowspan = GetLessonCount(schedule.StartTime, schedule.EndTime);
                                <td rowspan="@rowspan" class="align-middle bg-light schedule-cell" data-schedule-id="@schedule.ScheduleID" style="cursor:pointer;">
                                    <div class="font-weight-bold">@(schedule.Course?.CourseName)</div>
                                    <div>@Localizer["Code"]: @schedule.CourseID</div>
                                    <div>@Localizer["Teacher"]: @(schedule.Course?.Teacher?.FullName)</div>
                                    <div>@schedule.StartTime:hh\:mm - @schedule.EndTime:hh\:mm</div>
                                </td>
                            }
                            else
                            {
                                <td class="empty-cell schedule-cell" data-date="@date.ToString("yyyy-MM-dd")" data-lesson="@lesson">&nbsp;</td>
                            }
                        }
                    }
                </tr>
            }
        </tbody>
    </table>
}

@functions {
    int GetLessonStart(TimeSpan startTime)
    {
        int minutes = (int)startTime.TotalMinutes;
        if (minutes >= 405 && minutes < 540) return 1 + (minutes - 405) / 45;
        if (minutes >= 560 && minutes < 695) return 4 + (minutes - 560) / 45;
        if (minutes >= 750 && minutes < 1020) return 7 + (minutes - 750) / 45;
        if (minutes >= 1080 && minutes < 1215) return 13 + (minutes - 1080) / 45;
        return -1;
    }

    int GetLessonCount(TimeSpan startTime, TimeSpan endTime)
    {
        return (int)((endTime - startTime).TotalMinutes / 45);
    }
}
