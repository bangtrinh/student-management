@model List<StudentManagement.Models.Schedule>
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    var startOfWeek = ViewBag.StartOfWeek as DateTime? ?? DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek + 1);
    var endOfWeek = startOfWeek.AddDays(6);
    var prevWeek = startOfWeek.AddDays(-7);
    var nextWeek = startOfWeek.AddDays(7);
    var studentId = Context.Request.Query["studentId"];
}

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<h2 class="text-center">@Localizer["Schedule"]</h2>

<form asp-action="Index" method="get" class="mb-3 text-center">
    <div class="form-group d-inline-block">
        <label for="studentId">@Localizer["StudentId"]:</label>
        <input type="text" name="studentId" id="studentId" class="form-control d-inline-block" style="width: 200px;" value="@studentId" />
        <button type="submit" class="btn btn-primary">@Localizer["Search"]</button>
    </div>
</form>

@if (string.IsNullOrEmpty(studentId))
{
    <div class="alert alert-info text-center">
        @Localizer["PleaseEnterStudentId"]
    </div>
}
else
{
    <div class="text-center mb-3">
        <a href="@Url.Action("Index", new { studentId = studentId, weekStart = prevWeek })" class="btn btn-outline-dark">←</a>
        <strong>@startOfWeek.ToString("dd/MM/yyyy") - @endOfWeek.ToString("dd/MM/yyyy")</strong>
        <a href="@Url.Action("Index", new { studentId = studentId, weekStart = nextWeek })" class="btn btn-outline-dark">→</a>
    </div>

    <table class="table table-bordered text-center">
        <thead class="thead-dark">
            <tr>
                <th class="border">@Localizer["Period"]</th>
                @for (int i = 0; i < 7; i++)
                {
                    var date = startOfWeek.AddDays(i);
                    <th class="border">@date.ToString("dddd") <br> (@date.ToString("dd/MM"))</th>
                }
            </tr>
        </thead>
        <tbody>
            @for (int lesson = 1; lesson <= 15; lesson++)
            {
                <tr>
                    <td class="font-weight-bold border bg-light">@Localizer["Period"] @lesson</td>
                    @for (int i = 0; i < 7; i++)
                    {
                        var date = startOfWeek.AddDays(i);
                        var schedule = Model?.FirstOrDefault(s => s.ClassDate.Date == date.Date && GetLessonStart(s.StartTime) == lesson);

                        var isCoveredByPreviousRowspan = Model?.Any(s => s.ClassDate.Date == date.Date &&
                        GetLessonStart(s.StartTime) < lesson &&
                        GetLessonStart(s.StartTime) + GetLessonCount(s.StartTime, s.EndTime) > lesson) ?? false;

                        if (!isCoveredByPreviousRowspan)
                        {
                            if (schedule != null)
                            {
                                int rowspan = GetLessonCount(schedule.StartTime, schedule.EndTime);
                                if (rowspan > 0)
                                {
                                    <td rowspan="@rowspan" class="align-middle border bg-light schedule-cell" data-schedule-id="@schedule.ScheduleID" style="cursor: pointer;">
                                        <div class="font-weight-bold">
                                            @(
                                                string.IsNullOrEmpty(schedule.Course?.CourseName)
                                                ? Localizer["CourseNotFound"]
                                                : schedule.Course.CourseName
                                                )
                                        </div>
                                        <div>@Localizer["Code"]: @schedule.CourseID</div>
                                        <div>
                                            @Localizer["Teacher"]: @(string.IsNullOrEmpty(schedule.Course?.Teacher?.FullName)
                                                                     ? Localizer["NoTeacherAssigned"]
                                                                     : schedule.Course.Teacher.FullName)
                                        </div>
                                        <div>@schedule.StartTime.ToString(@"hh\:mm") - @schedule.EndTime.ToString(@"hh\:mm")</div>
                                    </td>
                                }
                            }
                            else
                            {
                                <td class="border empty-cell schedule-cell" data-date="@date.ToString("yyyy-MM-dd")" data-lesson="@lesson" style="cursor: pointer;">&nbsp;</td>
                            }
                        }
                    }
                </tr>
            }
        </tbody>
    </table>

    <!-- Modal -->
    <div class="modal fade" id="scheduleModal" tabindex="-1" aria-labelledby="scheduleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="scheduleModalLabel">@Localizer["EditOrAddSchedule"]</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="modalBody">
                    <!-- Form sẽ được load qua AJAX -->
                </div>
            </div>
        </div>
    </div>
}

@functions {
    int GetLessonStart(TimeSpan startTime)
    {
        var minutes = (int)startTime.TotalMinutes;
        var baseTime6h45 = 6 * 60 + 45;
        var baseTime9h20 = 9 * 60 + 20;
        var baseTime12h30 = 12 * 60 + 30;
        var baseTime18h = 18 * 60;

        if (minutes >= baseTime6h45 && minutes < baseTime6h45 + 45 * 3)
            return 1 + (minutes - baseTime6h45) / 45;
        else if (minutes >= baseTime9h20 && minutes < baseTime9h20 + 45 * 3)
            return 4 + (minutes - baseTime9h20) / 45;
        else if (minutes >= baseTime12h30 && minutes < baseTime12h30 + 45 * 6)
            return 7 + (minutes - baseTime12h30) / 45;
        else if (minutes >= baseTime18h && minutes < baseTime18h + 45 * 3)
            return 13 + (minutes - baseTime18h) / 45;

        return -1;
    }

    int GetLessonCount(TimeSpan startTime, TimeSpan endTime)
    {
        return (int)((endTime - startTime).TotalMinutes / 45);
    }

    TimeSpan GetStartTimeFromLesson(int lesson)
    {
        switch (lesson)
        {
            case int n when n >= 1 && n <= 3:
                return TimeSpan.FromMinutes(6 * 60 + 45 + (lesson - 1) * 45);
            case int n when n >= 4 && n <= 6:
                return TimeSpan.FromMinutes(9 * 60 + 20 + (lesson - 4) * 45);
            case int n when n >= 7 && n <= 12:
                return TimeSpan.FromMinutes(12 * 60 + 30 + (lesson - 7) * 45);
            case int n when n >= 13 && n <= 15:
                return TimeSpan.FromMinutes(18 * 60 + (lesson - 13) * 45);
            default:
                return TimeSpan.Zero;
        }
    }
}

<script>
    $(document).ready(function () {
        $('.schedule-cell').click(function () {
            var scheduleId = $(this).data('schedule-id');
            var date = $(this).data('date');
            var lesson = $(this).data('lesson');
            var studentId = '@Context.Request.Query["studentId"]';

            if (scheduleId) {
                $.ajax({
                    url: '@Url.Action("Details", "Schedule")',
                    type: 'GET',
                    data: { id: scheduleId },
                    success: function (data) {
                        $('#modalBody').html(data);
                        $('#scheduleModal').modal('show');
                    },
                    error: function () {
                        alert('@Localizer["CannotLoadEditForm"]');
                    }
                });
            } else {
                $.ajax({
                    url: '@Url.Action("Create", "Schedule")',
                    type: 'GET',
                    data: { studentId: studentId, classDate: date, lesson: lesson },
                    success: function (data) {
                        $('#modalBody').html(data);
                        $('#scheduleModal').modal('show');
                    },
                    error: function () {
                        alert('@Localizer["CannotLoadCreateForm"]');
                    }
                });
            }
        });
    });
</script>

<style>
    .table th, .table td {
        text-align: center;
        vertical-align: middle;
    }

    .form-control {
        width: 200px;
        display: inline-block;
    }

    .btn {
        margin: 0 10px;
    }

    .thead-dark th {
        background-color: #343a40;
        color: white;
    }

    .empty-cell {
        background-color: #f8f9fa;
    }
</style>
